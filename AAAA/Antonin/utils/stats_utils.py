"""
Author : Antonin JEAN
Date : 15/05/2023

-*-
Handles the stat generation through the class Stat, the latter, after
being initialized with a list of data, can be used to generate proper
html code that will use chart.js to display itself.

Contact: ofghanirre@gmail.com
"""

from graph_utils import generer_histogramme, SCRIPT
from typing import List
import utils
from itertools import combinations

class StatInput():
    def __init__(self, title: str, data : list, labels : list, horizontale = False):
        """
        :param title:   str, name of the graph
        :param data:    list(int), list of values
        """
        self.title  = title
        self.data   = data
        self.labels = labels
        self.horizontale = horizontale
    
    def generate_graph(self):
        return generer_histogramme(self.data, self.generate_hash(self.title), self.labels, title=self.title, horizontale = self.horizontale)

    def generate_hash(self, name):
        """ 
        Function used to generate hash for graph's UUID. The id are used for HTML 
        identification to locate div containing the graphs; Thus they must be unique.
        """
        return hash(name)
    
    def to_data(self):
        return {self.title : [self.labels, self.data, self.horizontale]}

    @staticmethod
    def from_data(_data : tuple):
        title, d  = _data
        labels = d[0]
        data = d[1]
        if len(d) > 2:
            return StatInput(title, data, labels, bool(int(d[2])))
        return StatInput(title, data, labels)
            

class Stat():
    def __init__(self, data : List[StatInput]):
        """
        :param data:    list[StatInput], list of data
        """
        self.data = data
        self.graph = [elem.generate_graph() for elem in self.data]
    
    def get_graph(self) -> List[str]:
        return self.graph
    
    def get_graph_as_html(self, containsScript = False) -> str:
        result = "<!-- Generated by PL stat_utils.py -->\n"
        result += (SCRIPT + '\n') if containsScript else ''
        result += '\n'.join(self.get_graph())
        result += "<!-- end of generated script -->\n"
        return result

import io, csv

class CsvStringBuilder():
    def __init__(self, labelsItems : list):
        # Créez un objet StringIO
        self.data = []
        # Créez un objet writer pour écrire dans l'objet StringIO
        self.addLine(labelsItems)
        self.__result_str = None

    def addLine(self, items : list):
        self.data.append(items)
        return self
    
    def __str__(self):
        with io.StringIO() as __f:
            writer = csv.writer(__f,  lineterminator="\\n",  quotechar="'")
            for line in self.data:
                writer.writerow(line)
            result = __f.getvalue()
        return result

    def __repr__(self):
        return self.__str()
