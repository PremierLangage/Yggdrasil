"""
Author : Antonin JEAN
Date : 15/05/2023

-*-
Handles the stat generation through the class Stat, the latter, after
being initialized with a list of data, can be used to generate proper
html code that will use chart.js to display itself.

Contact: ofghanirre@gmail.com
"""

from graph_utils import generer_histogramme, SCRIPT
from typing import List

class StatInput():
    def __init__(self, title: str, data : list):
        """
        :param title:   str, name of the graph
        :param data:    list(int), list of values
        """
        self.title = title
        self.data  = data
    
    def generate_graph(self):
        return generer_histogramme(self.data, generate_hash(title))

    def generate_hash(self, name):
        """ 
        Function used to generate hash for graph's UUID. The id are used for HTML 
        identification to locate div containing the graphs; Thus they must be unique.
        """
        return hash(name)

class Stat():
    def __init__(self, data : list):
        """
        :param data:    list[StatInput], list of data
        """
        self.data = data
        self.graph = [elem.generate_graph() for elem in self.data]
    
    def get_graph(self) -> List[str]:
        return self.graph
    
    def get_graph_as_html(self, containsScript = False):
        result = "<!-- Generated by PL stat_utils.py -->\n"
        result += (SCRIPT + '\n') if containsScript else ''
        result += '\n'.join(self.get_graph)
        result = "<!-- end of generated script -->\n"
        return result