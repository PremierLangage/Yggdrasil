




title= Evaluation initiale de python

introduction==


Vous avez un temps limité pour faire des exercices python.

Les exercices sont progressifs ne font que tester vote compétence de programmation. 

Chaque exercice terminé permet de passer à l'exercice suivant.

==


# Variables
@ /ComputerScience/python/concept/variable/variable001.pl

@ /ComputerScience/python/concept/variable/variable005.pl

# Manipulation de listes
@liste.pl


# learningpath= [[x] for x in range(19)]

learningpath =[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18]] 





doc==

Voici une liste d'exercices qui peuvent être utilisés pour évaluer le niveau d'un programmeur Python :


1° **variable** : définir une variable X qui contient la constante '576'. 

1° **Expression**: ecrire une expression qui calcul le discriminant  $b^2-4ac$ d'un polynome $P(x) = ax² + bx + c$, 

1° **Fonctions**: ecrire une fonction $P(a,b,c,x)$ qui calcul la valeur du polynome $P(x) = ax² + bx + c$ en $x$.

1° **Manipulation de liste** : Écrivez une fonction qui prend une liste de nombres et renvoie une nouvelle liste qui ne contient que les nombres vérifiant un prédicat.

1° **Dictionnaires** : Écrivez une fonction qui prend un dictionnaire et renvoie une liste de toutes les clés qui ont la valeur maximale/minimal, l'une ou l'autre des propriétés.

1° **Strings** : Écrivez une fonction qui prend une liste de chaînes de caractères L et une chaîne de caractères mot comme arguments. 
La fonction devrait renvoyer une nouvelle liste qui ne contient que les chaînes de L qui contiennent la chaîne mot comme sous-chaîne.

1° **Compréhensions de liste** : Écrivez une seule ligne de code qui prend une liste de nombres et renvoie une nouvelle liste qui contient l'application d'une fonction de base de chaque nombre.

1° **Modules** : Écrivez un programme qui utilise le module *os* pour lister tous les fichiers d'un répertoire donné.

1° **Tests unitaires** : Écrivez une série de tests unitaires pour la fonction que vous avez écrite à l'exercice 3.

1° **Exceptions** : Écrivez un bloc de code qui attrape et gère une exception lorsque vous essayez de diviser par zéro. Ecrire une fonction qui calcul $G(x)= (x-a)/(x-b)+x/(x-c)$ et qui lève une exception quand la fonction n'est pas définie (x==b) ou (x==c).

1° **Expressions régulières** : Écrivez une fonction qui utilise une expression régulière $import re$ pour vérifier si une chaîne est une adresse e-mail valide.

1° **Manipulation de fichiers** : Écrivez une fonction qui lit un fichier texte et renvoie le nombre de mots qu'il contient.

1° **Générateurs** : Écrivez un générateur qui produit les nombres impairs de 1 à n.

1° **Decorateurs** : Écrivez un décorateur qui enregistre le temps d'exécution d'une fonction.

1° **Classes** : Écrivez une classe Personne avec un constructeur qui prend un nom et un âge, ainsi qu'une méthode pour afficher les informations de la personne.

1° **Héritage** : Écrivez une classe Étudiant qui hérite de la classe Personne et ajoute une nouvelle propriété, majeure.


1° **Web scraping** : Utilisez BeautifulSoup ou Scrapy pour extraire les titres de la page d'accueil de BBC News.

1° **Multithreading** : Écrivez un programme qui utilise le multithreading pour télécharger plusieurs pages web simultanément.

1° **SQL et interaction avec base de données** : Écrivez un script Python qui se connecte à une base de données SQLite, crée une nouvelle table, et insère des données dans cette table.

1° **Frameworks web** : Développez une petite application web avec Flask ou Django qui affiche un formulaire et affiche les données soumises.

1° **Analyse de données** : Utilisez pandas pour lire un fichier CSV, calculer des statistiques descriptives sur les données, et afficher quelques graphiques avec matplotlib.

==

