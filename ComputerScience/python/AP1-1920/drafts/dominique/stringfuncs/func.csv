niveau;objectif;taboo;soluce;pltest;description
1;capital(str);capitalize;def capital(s):\n\treturn s.capitalize();; Renvoie une copie de la chaîne avec son premier caractère en majuscule et le reste en minuscule.
3;normalise(str);casefold;def normalise(s):\n\treturn s.casefold();Renvoie une copie casefolded de la chaîne. Les chaînes casefolded peuvent être utilisées dans des comparaison insensibles à la casse.<br>Le casefolding est une technique agressive de mise en minuscule, car il vise à éliminer toutes les distinctions de casse dans une chaîne. Par exemple, la lettre minuscule 'ß' de l'allemand équivaut à "ss". Comme il est déjà minuscule, lower() ferait rien à 'ß'; casefold() le convertit en "ss".<br>L'algorithme de casefolding est décrit dans la section 3.13 de la norme Unicode.
1;centrer(str,width, fillchar);center;def centrer(s,width,fillchar=' '):\n\treturn s.center(width,fillchar);Complette la chaîne pour quelle soit centrée dans une chaîne de longueur width. Le remplissage est fait en utilisant l'argument fillchar (qui par défaut est un espace ASCII). La chaîne d'origine est renvoyée si width est inférieur ou égale à len(str).
1;occurence(str,sub);count;def occurence(str,sub):\n\treturn str.count(sub);Donne le nombre d'occurrences de sub ne se chevauchant pas dans le range [start, end]. Les arguments facultatifs start et end sont interprétés comme pour des slices.
1;terminepar(str,suffix);endswith;def terminepar(str,suffix):\n\t return str.endswith(suffix);Donne True si la chaîne se termine par suffix, sinon False. suffix peut aussi être un tuple de suffixes à rechercher.
1;trouve;find;def trouve(str,sub):\n\treturn str.find(sub);Retourne la première la position dans la chaîne où sub est trouvé dans la chaine. Retourne -1 si sub n'est pas trouvé.<br>Remarque: La méthode find() ne doit être utilisée que si vous avez besoin de connaître la position de sub. Pour vérifier si sub est une sous chaine ou non, utilisez l'opérateur **in**  'Py' in 'Python'== True
