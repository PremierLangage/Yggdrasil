Strategy de révision bac+3 :  (BORIE pour les L3 info et les ESIPE info1)
============================

META-DONNEES :
==============

Public cible et contexte :
Étudiant entrant en L3 informatique ou en
première année du cycle ingénieur ESIPE filière info. Le C pour ces
deux promotions visent à concevoir des programmes de taille moyenne
résolvant des problématiques de moyenne ambition. Les élèves sont
supposés déjà avoir programmé dans un langage peut-être différent du
C. Toutefois, le temps disponible pour renforcer les connaissances des
élèves sur la base du langage C manque dans ces deux formations.


Motivations :
Offrir la possibilité aux élèves de mettre à jour leur
connaissances et maîtrises des bases du langage C. Diffuser un outil
permettant de réviser les notions du langage C avant examens.


Ontologie associée :
Cette dernière est relativement grossière. Il s'agit de classifier les
notions du langage en une bonne dizaine de thèmes. La stratégie vise
plus la remise à niveau que l'apprentissage, ainsi les exercices ont
vocation à être indépendant, distribué à la demande. Aucune
scénarisation pédagogique n'est souhaitée pour le moment.


Niveau de maîtrise :
Chaque étudiant possède un niveau de maîtrise qui
est mis à jour à chaque activité de l'élève. Ici, on souhaiterait deux
pourcentages par notions. Pour chaque étudiant et pour chaque notion,
un couple (niveau, confiance) est enregistré. Par exemple, si l'élève
Borie possède (0.43, 0.21) pour la notion INPUT_OUPUT, on considéra
qu'il maitrise les entrées/sorties en langage C à 43% avec un indice
de confiance de 21%. Le niveau de maîtrise d'un élève pour cette
stratégie est le dictionnaire complet {notion1 : (niveau1,
confiance1), notion2 : (niveau2, confiance2), ...}


Niveau de maîtrise global :
C'est la moyenne totale sur toutes les notions (0% donc pour les
notions pas encore travaillée) du niveau de maîtrise de chaque notion.


Tag d'exercice :
Les exercices sont tagués avec un ensemble fini de
notions ainsi qu'un chiffre(0-9) concaténée à chacune des notions
apparaissant dans le tag. Si un exercice est tagué avec
function2|pointer4, cela signifie que l'exercice fait travaillé deux
notions : la notion de fonction avec une force de 2/9 et la notion de
pointeur avec une force de 4/9.


Historique :
Pour chaque étudiant, on peut visualiser l'activité complète de son
travail sur cette stratégie. À titre d'exemple,
Borie = [
(2134712783, "hello_world.pl", (0.2, 0,0)),
(2134712888, "hello_world.pl", (0.8, 1.0)),
]
Ici, Borie n'a travaillé uniquement sur l'exercice "Hello_world.pl" il
l'a tenté deux fois (105 secondes plus tard la seconde fois). Il est
passé de 20% à 80% de note en compilation et avant aucun tests ne
passaient, la seconde fois, tous les tests passaient.
De manière générale, l'historique doit contenir une entrée pour chaque
clic sur "valider". L'entrée associé au clic devra renseigner à minima :
- un timestamp (quand)
- le nom de la ressource (chemin de l'exo ?)
- la note (ici un tuple de deux flotant (compilation, tests))


TRAVAIL SUR PL :
================


Curseur de stratégie :
Une fois connecté, l'élève peut placer un curseur (10 graduations
minimum) entre "Révision <--> Approfondissement". Lorsque l'élève
place le curseur vers "Révision", il demande à PL de travailler plus
sur des notions qu'il a potentiellement déjà abordé et il souhaite
durcir son niveau de maîtrise sur du déjà vu. Plus le curseur se situe
du coté "Approfondissement", plus l'élève demande des activités à la
frontière de ses connaissances pour introduire de nouvelles notions


Focus sur une notion :
Via une interface à déterminer, l'élève peut demander de travailler
une notion en particulier. On pourrait par exemple imaginer que les
noeuds de l'ontologie soient cliquables. À ce moment là, la stratégie
orientera les exercices vers la notion demandée toujours suivant le
curseur. Si le curseur est fort vers "Révision", alors ce seront des
exercices simples tagués vers la notion. Si le curseur est proche de
"Approfondissement", les exercices seront plus ambitieux et
mélangeront la notion visée avec d'autres notions en interaction avec
la première.


Annuler le Focus sur une notion :
En annulant le focus, l'élève repositionne la stratégie sur
l'ontologie complète et annule l'ancienne orientation des exercices
vers une notion spécifique.


Choix des exercices :
La stratégie révision C bac+3 choisit de manière autonome les
exercices suivant le niveau de maîtrise de l'élève, son historique de
travail ainsi que la position de curseur.


Sauter un exercice :
L'élève peut ne pas vouloir faire(finir) un exercice et demander un
autre à tout moment.


S'arrêter / mettre en pause :
En s'arrêtant (ou faire un pause), l'exercice courant est
déchargé au profit du tableau de bord seul qui lui permet de
visualiser son niveau de maîtrise ainsi que l'évolution dans le temps
de son niveau de maîtrise.


Commencer à réviser :
En cliquant sur un bouton "Réviser", PL charge soit le premier
exercice de C (le premier de tous les temps : hello_world.pl), soit PL
recharge le dernier exercice durant lequel l'élève avait fait
pause. Si un focus sur notion vient juste d'être opéré, un nouvel
exercice orienté vers la notion voulue est sélectionné par la
stratégie.


ÉVALUATION :
============


Soumission unique :
(c'est à dire le premier clic sur Valider). Le grader
grade avec un pourcentage qui dépend de la qualité de la compilation +
du nombre de test validé. La note sera composé de 


Soumissions multiples :
La note à l'exercice est conditionnée par les précédentes notes
obtenues qui doivent restées accessibles pour le grader. Non spécifiée
pour le moment, la note est une liste d'objets python. (et
probablement une liste de tuples d'entiers/flottant).


Changement d'exercice et maîtrise :
Lorsque l'élève change d'exercice, la note courante obtenue à
l'exercice affecte le niveau de maîtrise de l'étudiant. Y compris si
l'étudiant n'a pas voulu faire l'exercice et à tout de suite cliquer
sur "Faire un autre exercice" (voir sauter un exercice). les
modifications dépendent des tag de l'exercice et de la note finale
courante obtenue.


DASHBOARD :
===========


Le dashboard est générer par l'historique de l'élève ainsi que
l'ensemble des historiques élèves de la même promotions.


BADGES ET ACHÈVEMENTS :
=======================


GCC-ambulant :
Faire parti des 5% des étudiants ayant les meilleurs notes pour la
compilation.


Chasseur de Warning :
Avoir 100% de réussite de compilation sur 95% des exercices faits.


Programme avec ses pieds :
Avoir fait plus de 20% de ces exercices avec des warnings.


Sniper :
Faire parti des 5% des étudiants ayant résolus le plus d'exercices
avec la note maximale à la première tentative.


Tueur à gage :
Sauter/Abandonner un maximum de 5% d'exercice proposé par la stratégie.


Spoon killer :
Avoir un niveau de maîtrise global compris entre 0% et 20%


Apprenti tueur :
Avoir un niveau de maîtrise global compris entre 20% et 40%


Tueur embusqué :
Avoir un niveau de maîtrise global compris entre 40% et 60%


Sulfateur invétéré :
Avoir un niveau de maîtrise global compris entre 60% et 40%


Exterminateur de mémoire :
Avoir un niveau de maîtrise global compris entre 80% et 100%


API :
=====

- Obtenir un historique pour chaque élève
- Obtenir une liste des ressources (hardcodé dans la strat)
- 
