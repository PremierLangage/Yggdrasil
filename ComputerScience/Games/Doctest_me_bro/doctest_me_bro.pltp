#*****************************************************************************
#  Copyright (C) 2020 Nicolas Borie <nicolas dot borie at univ-eiffel . fr>
#
#  Distributed under the terms of Creative Commons Attribution-ShareAlike 3.0
#  Creative Commons CC-by-SA 3.0
#
#    This code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  The full text of the CC-By-SA 3.0 is available at:
#
#            https://creativecommons.org/licenses/by-sa/3.0/
#            https://creativecommons.org/licenses/by-sa/3.0/fr/
#*****************************************************************************

author=Nicolas Borie

title=Système : Garantir la validité d'un code source via des tests

introduction==
Ce TP porte sur une des compétences les plus avancées de l'informatique : 

**Garantir la conformité et la qualité d'une solution informatique**

C'est une des compétences que vise un chef de projet informatique ayant des 
développeurs sous ses ordres. Il doit tenter de garantir les productions 
**avant de les livrer aux clients**. Et c'est très dur de deviner si les choses 
vont fonctionner ou pas. 

Parmi les outils fondamentaux, il y a les tests. Inclure partout des tests 
de cohérence peut permettre de **detecter les bogues** et aussi de **garantir la 
non régression** lors des modifications (nouveaux codes qui cassent des choses 
qui fonctionnaient avant...). 

Dans ce TP, les exercices cachent des codes valides et non valides. Il n'y a 
rien à coder, il faut juste imaginer les tests qui vont certifier le bon ou mauvais 
fonctionnement des fonctions. Par exemple, Pour une fonction qui calcule le carré 
d'un entier, on pourrait imaginer ça :

<pre>
>>> carre(0)
0
>>> carre(1)
1
>>> carre(-12)
144
>>> carre(20)
400
>>> import random; carre(random.randint(-1000, 1000)) >= 0
True
</pre>

Les tests ne sont jamais une garantie totale mais ils constituent déjà un bon indice 
sur la validité d'un code. L'objectif des exercices qui suivent est de deviner les 
bons tests, à l'aveugle, qui font échouer les mauvaises propositions mais que toutes
les bonnes propositions réussissent...

==

@ /ComputerScience/Games/Doctest_me_bro/doctest_hello.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_factorial.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_mean_positives.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_last_max_positives.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_three_max.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_dicho_search.pl

@ /ComputerScience/C/examples/partenaire.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_sorted_join.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_sort.pl

@ /ComputerScience/Games/Doctest_me_bro/doctest_median.pl