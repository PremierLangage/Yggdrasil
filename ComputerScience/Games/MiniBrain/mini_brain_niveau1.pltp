#*****************************************************************************
#  Copyright (C) 2020 Nicolas Borie <nicolas dot borie at univ-eiffel . fr>
#
#  Distributed under the terms of Creative Commons Attribution-ShareAlike 3.0
#  Creative Commons CC-by-SA 3.0
#
#    This code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  The full text of the CC-By-SA 3.0 is available at:
#
#            https://creativecommons.org/licenses/by-sa/3.0/
#            https://creativecommons.org/licenses/by-sa/3.0/fr/
#*****************************************************************************

author=Nicolas Borie
title=Mini Brain : premiers exercices

introduction==
Le Mini Brain est un simulateur virtuel de petit CPU possédant une Unité
Arithmétique et Logique pour nombres entiers sur 16 bits. Le procésseur 
possède 1 accumulateur et 5 registres numéroté de #0 à #4. Par commodité,
l'accumulateur a est aussi le registre de numéro #-1. 

Lorsque l'on allume le Mini Brain, par dáfault, les registres et 
l'accumulator contiennent tous la valeur zéro. Un programme est alors 
chargé dans la mémoire interne de Mini Brain. La première instruction à 
être exécutée (et donc la valeur originelle du compteur ordinal ou 
pointeur d'instruction) est l'instruction 1. Chaque ligne contient 
une instruction ou bien une valeur.

Voici un programme Mini Brain sur 13 lignes.

<pre>
 1: ld 12 a      // charger 12 dans l'accumulateur
 2: ld $12 #4    // charger la valeur en case mémoire 12 dans le registre 4
 3: mv #4 #0     // copier le registre 4 dans le registre 0
 4: st #1 $21    // sauver le registre 1 en case mémoire 21
 5: inc a        // incrémenter l'accumulateur
 6: inc #4       // incrémenter le registre 4
 7: inc #$13     // incrémenter le resgistre dont le numéro est en case mémoire 13
 8: dec #3       // décrémenter le registre 3
 9: dec #$13     // décrémenter le resgistre dont le numéro est en case mémoire 13
10: inc #3       // incrémenter le registre 3
11: 
12: 12345
13: 2
</pre>

L'exécution de ce programme dans le Mini Brain produit la verbose 
suivante.

<pre>
|     #0     #1     #2     #3     #4 |  #-1=a | f | -->  PC : next instruction
|      0      0      0      0      0 |      0 | 0 | -->   1 : ld 12 a
|      0      0      0      0      0 |     12 | 0 | -->   2 : ld $12 #4
|      0      0      0      0  12345 |     12 | 0 | -->   3 : mv #4 #0
|  12345      0      0      0  12345 |     12 | 0 | -->   4 : st #1 $21
|  12345      0      0      0  12345 |     12 | 0 | -->   5 : inc a
|  12345      0      0      0  12345 |     13 | 0 | -->   6 : inc #4
|  12345      0      0      0  12346 |     13 | 0 | -->   7 : inc #$13
|  12346      0      0      0  12346 |     13 | 0 | -->   8 : dec #3
|  12346      0      0     -1  12346 |     13 | 0 | -->   9 : dec #$13
|  12345      0      0     -1  12346 |     13 | 0 | -->  10 : inc #3
|  12345      0      0      0  12346 |     13 | 1 | -->  11 : exit a
Process exited normally with code 13
0
</pre>

Voici une documentation ultra rapide des primitives de l'unité de contrôle 
du Mini Brain.

<pre style="font-size: 0.8em">
List of available functions:

Data management :
=================
* ld [$? or value] [#?-a]: load value inside the CPU
* st [#?-a or value] [$?]: store value to central memory
* mv [#?-a] [#?-a]: internal fast copy inside the CPU

Arithmetics :
=============
* inc [#?]: increment targeted register 
            (up the flag if zero)
* dec [#?]: decrement targeted register 
            (up the flag if zero)
* add [#?-a or value or $?]: add targeted value to the accumulator 
                             (up the flag if zero)
* sub [#?-a or value or $?]: subtract targeted value to the accumulator 
                             (up the flag if zero)
* mul [#?-a or value or $?]: multiply by targeted value the accumulator 
                             (up the flag if zero)
* div [#?-a or value or $?]: divide the accumulator by targeted value 
                             (up the flag if zero if exact division)
* mod [#?-a or value or $?]: replace the accumulator by its remainder when divide by targeted value 
                             (up the flag if zero)
* cmp [#?-a or value or $?]: do nothing 
                             (up the flag if the accumulator is smaller than the argument)

Jumps :
=======
* bfup [#?-a or value or $?]: jump to instruction indexed by the value if the flag is up 
                              else do nothing and continue
* bfdn [#?-a or value or $?]: jump to instruction indexed by the value if the flag is down 
                              else do nothing and continue
* bnow [#?-a or value or $?]: jump in all cases to instruction indexed by the value
* exit [#?-a or value or $?]: stop the program with return code the targeted value  
* empty instruction: produce the behavior of exit a
</pre>

Cette documentation reste aussi accessible dans les exercices...
==

@ /ComputerScience/Games/MiniBrain/mini_brain_fill_mem.pl

@ /ComputerScience/Games/MiniBrain/mini_brain_add.pl

@ /ComputerScience/Games/MiniBrain/mini_brain_max_2_val.pl

@ /ComputerScience/Games/MiniBrain/mini_brain_sum_range.pl

@ /ComputerScience/Games/MiniBrain/mini_brain_factorial.pl


