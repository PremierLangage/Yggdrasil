#*****************************************************************************
#  Copyright (C) 2020 Nicolas Borie <nicolas dot borie at univ-eiffel . fr>
#
#  Distributed under the terms of Creative Commons Attribution-ShareAlike 3.0
#  Creative Commons CC-by-SA 3.0
#
#    This code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  The full text of the CC-By-SA 3.0 is available at:
#
#            https://creativecommons.org/licenses/by-sa/3.0/
#            https://creativecommons.org/licenses/by-sa/3.0/fr/
#*****************************************************************************

author=Nicolas Borie
title=Mini Brain : niveau intermédiaire

introduction==
Il est très vivement conseillé d'avoir fini les premiers exercices 
d'introduction avec Mini Brain avant de se lancer dans cette seconde
vague d'exercices. Les exercices de cette feuille sont en effet de 
niveau intermédiaire et suppose que vous maitrisiez toutes les
fonctionnalités basiques du Mini Brain.


Voici une documentation ultra rapide des primitives de l'unité de contrôle 
du Mini Brain.

<pre style="font-size: 0.8em">
List of available functions:

Data management :
=================
* ld [$? or value] [#?-a]: load value inside the CPU
* st [#?-a or value] [$?]: store value to central memory
* mv [#?-a] [#?-a]: internal fast copy inside the CPU

Arithmetics :
=============
* inc [#?]: increment targeted register 
            (up the flag if zero)
* dec [#?]: decrement targeted register 
            (up the flag if zero)
* add [#?-a or value or $?]: add targeted value to the accumulator 
                             (up the flag if zero)
* sub [#?-a or value or $?]: subtract targeted value to the accumulator 
                             (up the flag if zero)
* mul [#?-a or value or $?]: multiply by targeted value the accumulator 
                             (up the flag if zero)
* div [#?-a or value or $?]: divide the accumulator by targeted value 
                             (up the flag if zero if exact division)
* mod [#?-a or value or $?]: replace the accumulator by its remainder when divide by targeted value 
                             (up the flag if zero)
* cmp [#?-a or value or $?]: do nothing 
                             (up the flag if the accumulator is smaller than the argument)

Jumps :
=======
* bfup [#?-a or value or $?]: jump to instruction indexed by the value if the flag is up 
                              else do nothing and continue
* bfdn [#?-a or value or $?]: jump to instruction indexed by the value if the flag is down 
                              else do nothing and continue
* bnow [#?-a or value or $?]: jump in all cases to instruction indexed by the value
* exit [#?-a or value or $?]: stop the program with return code the targeted value  
* empty instruction: produce the behavior of exit a
</pre>

Cette documentation reste aussi accessible dans les exercices...
==

@ /ComputerScience/Games/MiniBrain/intermediaire/mini_brain_factorial.pl

@ /ComputerScience/Games/MiniBrain/intermediaire/mini_brain_fibo.pl



