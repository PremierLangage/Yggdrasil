Latex:1

*[group=erreur_de_syntaxe] Le fichier.c suivant contient potentiellement des erreurs de syntaxes. : 


    #include <stdio.h>

    int main(void){

        printf("Hello, world!);

        return 0

    }

Combien y en a t'il ?

- 0
- 1
+ 2
- 3

*[group=erreur_de_syntaxe] Le fichier.c suivant contient potentiellement des erreurs de syntaxes. : 


    #include <stdio.h>

    int main(void){

        printf("Hello, world!");

        return 0

    }

Combien y en a t'il ?

- 0
+ 1
- 2
- 3

*[group=erreur_de_syntaxe] Le fichier.c suivant contient potentiellement des erreurs de syntaxes. : 


    #include <stdio.h>

    int main(void){

        printf("Hello, world!");

        return 0;

    }

Combien y en a t'il ?

+ 0
- 1
- 2
- 3

*[group=erreur_de_syntaxe] Le fichier.c suivant contient potentiellement des erreurs de syntaxes. : 


    include <stdio.h>

    int main(void){

        printf("Hello, world!");

        return 0

    }

Combien y en a t'il ?

- 0
+ 1
- 2
- 3

**[group=separateur] Quels sont les séparateurs dans un programme écrit en C ?

+ les espaces
+ les tabulations
+ les retours à la ligne
- les virgules
- les points virgules 

**[group=indentation] L'indentation d'un programme C ...

- ...permet au compilateur de reconnaitre les blocs
- ...est nécessaire pour l'éditeur de texte
+ ...aide à la lisibilité
- ...peut remplacer les accolades
- ...évite d'utiliser des ;

*[group=commentaire] Comment doivent être écrits les commentaires en C pour passer la norme ansi ?

- # ....
- // .... //
+ /* .....*/
- <! ... >

*[group=passage_a_la_ligne] Quel est le caractère permettant d'afficher un retour à la ligne en C ?

+ \n
- \t
- \r
- \c
- ;

*[group=affichage_Sortie_Standard] Quelle est l'instruction permettant d'afficher à l'écran une chaine de caractères en C ?

- print
- scanf
- println
+ printf

*[group=utilite_points_virgules] A quoi servent les points virgules en C ?

- À différencier du premier coup d'oeil un code écris en C et en Python
+ À indiquer au compilateur la fin d'une instruction simple 
- À indiquer au compilateur qu'il va lui falloir lire une nouvelle ligne

**[group=Compilation] Quelle(s) ligne(s) de commande permet(tent) de compiler le programme HelloWorld.c 
en un executable HelloWorld ?

+ gcc HelloWorld.c -o HelloWorld
+ gcc -ansi HelloWorld.c -o HelloWorld
- gcc -Ansi HelloWorld.c HelloWorld
- gcc -Ansi HelloWorld.c -o HelloWorld
- gcc -ansi -Wall HelloWorld.c HelloWorld
+ gcc -ansi -Wall HelloWorld.c -o HelloWorld
- gcc -ansi -wall HelloWorld.c HelloWorld 
- aucune de ces réponses

**[group=Compilation] Quelle(s) ligne(s) de commande permet(tent) de compiler le programme HelloWorld.c 
en un executable HelloWorld ?

- gcc HelloWorld.c HelloWorld
+ gcc HelloWorld.c -o HelloWorld
- gcc -Ansi HelloWorld.c -o HelloWorld
- gcc -ansi -Wall HelloWorld.c HelloWorld
- gcc -ansi -wall HelloWorld.c -o HelloWorld
- gcc -Ansi -Wall HelloWorld.c HelloWorld
- gcc -Ansi -wall HelloWorld.c -o HelloWorld
- aucune de ces réponses

**[group=Compilation] Quelle(s) ligne(s) de commande permet(tent) de compiler le programme HelloWorld.c 
en un executable HelloWorld ?

- gcc HelloWorld.c HelloWorld
- gcc -ansi HelloWorld.c HelloWorld
- gcc -Ansi HelloWorld.c HelloWorld
- gcc -Ansi HelloWorld.c -o HelloWorld
- gcc -ansi -wall HelloWorld.c -o HelloWorld
- gcc -Ansi -Wall HelloWorld.c -o HelloWorld
- gcc -Ansi -wall HelloWorld.c -o HelloWorld
+ aucune de ces réponse

**[group=Warning_floattant] On dispose de deux variables a et b. Dans quels cas,lors de l'exécution d'un 
programme calcul.c, peut-on constater que a + b == a ?

- Cela ne peut jamais arriver.
+ Lorsque b est nul.
- Lorsque a et b sont des entiers, cela arrive tout le temps.
- Lorsque a et b sont des flottants, cela arrive tout le temps.
- Aucune de ces réponses n'est correcte.

**[group=Warning_floattant] On dispose de deux variables a et b. Dans quels cas,lors de l'exécution d'un 
programme calcul.c, peut-on constater que a + b == a ?

- Lorsque a et b sont des entiers, cela arrive tout le temps.
- Lorsque a et b sont des floottants, cela arrive tout le temps.
+ Lorsque a et b sont des entiers, cela peut arriver.
+ Lorsque a et b sont des floottants, cela peut arriver.
- Aucune de ces réponses n'est correcte.

**[group=Division] Que vaut 3/2 en C ?

+ 1
- 1.
- 1.5
- 1.0
- On ne sait pas

**[group=Division] Que vaut 3./2 en C ?

- 1
- 1.
+ 1.5
- 1.0
- On ne sait pas

**[group=Division] Que vaut 3/2. en C ?

- 1
- 1.
+ 1.5
- 1.0
- On ne sait pas

**[group=Division] On considère les instructions suivantes :


    x = 3;

    y = 2;

Que vaut x/y ?

- 1
- 1.
- 1.5
- 1.0
+ On ne sait pas

*[group=adresse] Comment récupère t-on l'adresse d'une variablex ?

- x
- &x
- !x
- %x
- *x

**[group=Sans_Effet_de_bords] Parmi le code suivant, un certain nombre d'instructions ne modifient pas les 
variables locales du programme.


    /*1*/ #include <stdio.h>

    int main(void){

        printf("Hello, world!");

        return 0

    }



